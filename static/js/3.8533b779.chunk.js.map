{"version":3,"sources":["components/Profile/My Posts/MyPosts.module.css","components/Profile/My Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileDataEditReduxForm/ProfileDataEditReduxForm.module.css","components/Profile/My Posts/Post/Post.jsx","components/Profile/My Posts/MyPosts.jsx","components/Profile/My Posts/MyPostsContainer.jsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.jsx","components/Profile/ProfileDataEditReduxForm/ProfileDataEditReduxForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","imgMini","src","post","message","likes","maxLengthCreator10","maxLengthCreator","AddPostFormRedux","reduxForm","form","fieldPosts","onSubmit","handleSubmit","Field","name","component","Textarea","elementType","validate","placeholder","nativeFieldProfile","clearlyButton","MyPosts","postsElements","posts","reverse","map","p","profile","id","values","addPost","NewPostBody","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ContainerDataPosts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","match","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataEditReduxForm","error","information","block1","formSummaryError","Input","type","Object","keys","contacts","key","block2","information_buttonSave","ProfileInfo","toEditMode","Preloader","Contact","ContactTitle","ContactValue","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","information_buttonEdit","onClick","avatar","photos","large","editImg","accept","target","files","length","getPhoto","formData","saveDataProfile","then","initialValues","Profile","authorizedUserId","ProfileContainer","userId","params","getUserProfile","getStatus","compose","auth","isAuth","withAuthNavigate","useMatch"],"mappings":"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","file":"static/js/3.8533b779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPosts\":\"MyPosts_MyPosts__22igO\",\"post\":\"MyPosts_post__136A7\",\"fieldPosts\":\"MyPosts_fieldPosts__1RGwT\",\"nativeField\":\"MyPosts_nativeField__3cGh9\",\"nativeFieldProfile\":\"MyPosts_nativeFieldProfile__3oMFH\",\"clearlyButton\":\"MyPosts_clearlyButton__3EeQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__371Kq\",\"imgMini\":\"Post_imgMini__2cCV_\",\"post\":\"Post_post__3ERyT\",\"likes\":\"Post_likes__1gCS4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2LHtf\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"editImg\":\"ProfileInfo_editImg__1JdyR\",\"description\":\"ProfileInfo_description__2yWda\",\"descriptionItem\":\"ProfileInfo_descriptionItem__1EqOf\",\"status\":\"ProfileInfo_status__2G3BZ\",\"information\":\"ProfileInfo_information__2RNzs\",\"contactBio\":\"ProfileInfo_contactBio__15tg1\",\"information_buttonEdit\":\"ProfileInfo_information_buttonEdit__3wBjs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"information\":\"ProfileDataEditReduxForm_information__33SON\",\"formSummaryError\":\"ProfileDataEditReduxForm_formSummaryError__3Rasg\",\"information_buttonSave\":\"ProfileDataEditReduxForm_information_buttonSave__i2DLD\"};","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n\n    return (\n        <div className={s.item}>\n            <div className={s.imgMini}>\n                <img src={\"https://www.pngitem.com/pimgs/m/78-786293_1240-x-1240-0-avatar-profile-icon-png.png\"} />\n            </div>\n            <div className={s.post}>{props.message}</div>\n            <div className={s.likes}>\n                    <span>likes: </span>\n                    {props.likes}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post;","import React from 'react'\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nconst MyPosts = props => {\n\n        let postsElements =\n            [...props.posts].reverse().map(p => <Post profile={props.profile} key={p.id} message={p.message} likes={p.likes} />)\n\n        let onAddPost = (values) => {\n            props.addPost(values.NewPostBody)\n        }\n\n        return (\n            <div className={s.MyPosts}>\n                My Posts\n                <div className={s.post}>\n                    <AddPostFormRedux onSubmit={onAddPost} />\n                </div>\n                <div className={s.post}>\n                    {postsElements}\n                </div>\n            </div>\n        )\n}\n\nlet maxLengthCreator10 = maxLengthCreator(150)\n\nconst AddPostForm = (props) => {\n    return (\n        <form className={s.fieldPosts} onSubmit={props.handleSubmit}>\n            <Field name=\"NewPostBody\" component={Textarea}\n                   elementType={\"input\"} validate={maxLengthCreator10}\n                   placeholder={\"Write your posts here\"} className={s.nativeFieldProfile} />\n            <button className={s.clearlyButton}>Add post</button>\n        </form>\n    )\n}\n\nconst AddPostFormRedux = reduxForm({form: \"PostAddPostFormRedux\"})(AddPostForm)\n\nexport default MyPosts;","import React from 'react'\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nconst ContainerDataPosts = (props) => {\n\n    return (\n        <MyPostsContainer/>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (NewPostBody) => {\n            dispatch(addPostActionCreator(NewPostBody))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default ContainerDataPosts;","import React, {useEffect, useState} from 'react'\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status] )\n\n    const activateMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateMode}><b>Status:</b> {props.status || \"empty status\"}</span>\n                </div>\n            }\n            {editMode && !props.match &&\n            <div>\n                <b>Status:</b> <input onChange={onStatusChange} value={status} onBlur={deactivateMode} autoFocus={true}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import s from \"./ProfileDataEditReduxForm.module.css\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport React from \"react\";\n\nlet ProfileDataEdit = ({profile, handleSubmit, error}) => {\n    return (\n        <form className={s.information} onSubmit={handleSubmit}>\n            <div className={s.block1}>\n                {error && <div className={s.formSummaryError }>\n                    {error}\n                </div>}\n                <div>\n                    <b>Full name:</b>\n                    <Field placeholder={\"Your full name\"} name={\"fullName\"} component={Input} />\n                </div>\n                <div>\n                    <b>Looking for a job:</b>\n                    <Field  placeholder=\"Yes\" name={\"lookingForAJob\"} component={Input} type=\"checkbox\" value=\"yes\" />\n                </div>\n                <div>\n                    <b>Description:</b>\n                    <Field placeholder={\"Tell something about you\"} name={\"lookingForAJobDescription\"} component={Textarea} />\n                </div>\n                <div>\n                    <b>About me:</b>\n                    <Field placeholder={\"Tell something\"} name={\"aboutMe\"} component={Textarea} />\n                </div>\n                <div>\n                        <b>Contacts:</b>{ Object.keys(profile.contacts).map(key => {\n                        return <div>\n                            {key}: <Field key={key} placeholder={key} name={\"contacts.\" + key} component={Input}/>\n                        </div>\n                    }) }\n                </div>\n            </div>\n            <div className={s.block2}>\n                <div><button className={s.information_buttonSave}>save</button></div>\n            </div>\n        </form>\n    )\n}\n\nlet ProfileDataEditReduxForm = reduxForm({form: \"dataEdit\"})(ProfileDataEdit)\n\nexport default ProfileDataEditReduxForm\n","import React, {useState} from 'react'\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/preloader/Preloader\";\nimport ProfileStatusWithHooks from \".././ProfileStatus/ProfileStatusWithHooks\"\nimport ProfileDataEditReduxForm from \"../ProfileDataEditReduxForm/ProfileDataEditReduxForm\";\n\nconst ProfileInfo = (props) => {\n\n    let [editMode, toEditMode] = useState(false)\n\n    if (!props.profile) {\n        return <Preloader />\n    }\n\n    let getPhotoFromInput = (e) => {\n        if(e.target.files.length) {\n            props.getPhoto(e.target.files[0])\n        }\n    }\n\n    let Contact = ({ContactTitle, ContactValue}) => {\n        return <div className={s.contacts}>{ContactTitle} {ContactValue}</div>\n    }\n\n    let onSubmit = (formData) => {\n        props.saveDataProfile(formData)\n            .then( () => {toEditMode(false)} )\n    }\n\n    let ProfileData = () => {\n\n        return (\n            <div className={s.information}>\n                <div className={s.block1}>\n                    <div><b>Full name:</b> {props.profile.fullName}</div>\n                    <div><b>Looking for a job:</b> {props.profile.lookingForAJob ? \"yes\" : \"no\"}</div>\n                    <div><b>Description:</b> {props.profile.lookingForAJobDescription}</div>\n                    <div><b>About me: </b>{props.profile.aboutMe}</div>\n\n                    <div><b>Contacts:</b>{ Object.keys(props.profile.contacts).map(key => {\n                        return <Contact key={key} ContactTitle={key} ContactValue={props.profile.contacts[key]} />\n                    })}</div>\n                </div>\n                {!props.match &&\n                <div className={s.block2}>\n                    <div><button className={s.information_buttonEdit} onClick={() => {toEditMode(true)}}>edit</button></div>\n                </div>\n                }\n            </div>\n        )\n    }\n\n    return (\n            <div className={s.profile}>\n                <div className={s.avatar}>\n                    <img src={props.profile.photos.large || \"https://www.pngitem.com/pimgs/m/78-786293_1240-x-1240-0-avatar-profile-icon-png.png\"} />\n                </div>\n                {!props.match &&\n                    <div className={s.editImg}>\n                        <label> Upload avatar\n                            <input type={\"file\"} accept=\".png, .jpg, .jpeg\" onChange={getPhotoFromInput}/>\n                        </label>\n                    </div>\n                }\n                <div className={s.status}>\n                    <ProfileStatusWithHooks match={props.match} status={props.status} updateStatus={props.updateStatus} />\n                </div>\n                {editMode\n                    ? <ProfileDataEditReduxForm onSubmit={onSubmit} toEditMode={toEditMode}\n                                                      profile={props.profile} initialValues={props.profile} />\n                    : <ProfileData />}\n            </div>\n    )\n\n}\n\nexport default ProfileInfo;","import MyPostsContainer from \"./My Posts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\n\nconst Profile = (props) => {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status}\n                         updateStatus={props.updateStatus} authorizedUserId={props.authorizedUserId}\n                         match={props.match} getPhoto={props.getPhoto} saveDataProfile={props.saveDataProfile}/>\n            <MyPostsContainer profile={props.profile} />\n        </div>\n    )\n}\n\nexport default Profile;","import React, {useEffect} from 'react'\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getPhoto, getStatus, getUserProfile, saveDataProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {useMatch} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {withAuthNavigate} from \"../../hoc/withAuthRedirect\";\n\n\nlet ProfileContainer = (props) => {\n\n    useEffect(() => {\n        let userId = props.match ? props.match.params.userId : props.authorizedUserId;\n\n        props.getUserProfile(userId)\n        props.getStatus(userId)\n    })\n\n        return (\n            <Profile profile={props.profile} status={props.status}\n                     updateStatus={props.updateStatus} authorizedUserId={props.authorizedUserId}\n                     match={props.match} getPhoto={props.getPhoto} saveDataProfile={props.saveDataProfile} />\n        )\n}\n\nconst ProfileURLMath = (props) => {\n    const match = useMatch('/profile/:userId')\n    return <ProfileContainer {...props} match={match} />\n}\n\nlet mapStateToProps = (state) => {\n\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.id,\n        isAuth: state.auth.isAuth\n\n    })\n}\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, getPhoto, saveDataProfile}),\n    withAuthNavigate\n    )(ProfileURLMath)"],"sourceRoot":""}